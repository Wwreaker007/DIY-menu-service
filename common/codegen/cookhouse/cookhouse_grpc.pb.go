// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: cookhouse.proto

package cookhouse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CookHouseService_GetAllOrderByStatusFilter_FullMethodName = "/cookhouse.CookHouseService/GetAllOrderByStatusFilter"
	CookHouseService_GetOrderByOrderID_FullMethodName         = "/cookhouse.CookHouseService/GetOrderByOrderID"
	CookHouseService_UpdateOrderStatus_FullMethodName         = "/cookhouse.CookHouseService/UpdateOrderStatus"
)

// CookHouseServiceClient is the client API for CookHouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CookHouseServiceClient interface {
	GetAllOrderByStatusFilter(ctx context.Context, in *GetAllOrderByStatusFilterRequest, opts ...grpc.CallOption) (*GetAllOrderByStatusFilterResponse, error)
	GetOrderByOrderID(ctx context.Context, in *GetOrderByOrderIDRequest, opts ...grpc.CallOption) (*GetOrderByOrderIDResponse, error)
	UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*UpdateOrderStatusResponse, error)
}

type cookHouseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCookHouseServiceClient(cc grpc.ClientConnInterface) CookHouseServiceClient {
	return &cookHouseServiceClient{cc}
}

func (c *cookHouseServiceClient) GetAllOrderByStatusFilter(ctx context.Context, in *GetAllOrderByStatusFilterRequest, opts ...grpc.CallOption) (*GetAllOrderByStatusFilterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllOrderByStatusFilterResponse)
	err := c.cc.Invoke(ctx, CookHouseService_GetAllOrderByStatusFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookHouseServiceClient) GetOrderByOrderID(ctx context.Context, in *GetOrderByOrderIDRequest, opts ...grpc.CallOption) (*GetOrderByOrderIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderByOrderIDResponse)
	err := c.cc.Invoke(ctx, CookHouseService_GetOrderByOrderID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookHouseServiceClient) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*UpdateOrderStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrderStatusResponse)
	err := c.cc.Invoke(ctx, CookHouseService_UpdateOrderStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CookHouseServiceServer is the server API for CookHouseService service.
// All implementations must embed UnimplementedCookHouseServiceServer
// for forward compatibility.
type CookHouseServiceServer interface {
	GetAllOrderByStatusFilter(context.Context, *GetAllOrderByStatusFilterRequest) (*GetAllOrderByStatusFilterResponse, error)
	GetOrderByOrderID(context.Context, *GetOrderByOrderIDRequest) (*GetOrderByOrderIDResponse, error)
	UpdateOrderStatus(context.Context, *UpdateOrderStatusRequest) (*UpdateOrderStatusResponse, error)
	mustEmbedUnimplementedCookHouseServiceServer()
}

// UnimplementedCookHouseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCookHouseServiceServer struct{}

func (UnimplementedCookHouseServiceServer) GetAllOrderByStatusFilter(context.Context, *GetAllOrderByStatusFilterRequest) (*GetAllOrderByStatusFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrderByStatusFilter not implemented")
}
func (UnimplementedCookHouseServiceServer) GetOrderByOrderID(context.Context, *GetOrderByOrderIDRequest) (*GetOrderByOrderIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByOrderID not implemented")
}
func (UnimplementedCookHouseServiceServer) UpdateOrderStatus(context.Context, *UpdateOrderStatusRequest) (*UpdateOrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatus not implemented")
}
func (UnimplementedCookHouseServiceServer) mustEmbedUnimplementedCookHouseServiceServer() {}
func (UnimplementedCookHouseServiceServer) testEmbeddedByValue()                          {}

// UnsafeCookHouseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CookHouseServiceServer will
// result in compilation errors.
type UnsafeCookHouseServiceServer interface {
	mustEmbedUnimplementedCookHouseServiceServer()
}

func RegisterCookHouseServiceServer(s grpc.ServiceRegistrar, srv CookHouseServiceServer) {
	// If the following call pancis, it indicates UnimplementedCookHouseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CookHouseService_ServiceDesc, srv)
}

func _CookHouseService_GetAllOrderByStatusFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOrderByStatusFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookHouseServiceServer).GetAllOrderByStatusFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CookHouseService_GetAllOrderByStatusFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookHouseServiceServer).GetAllOrderByStatusFilter(ctx, req.(*GetAllOrderByStatusFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CookHouseService_GetOrderByOrderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByOrderIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookHouseServiceServer).GetOrderByOrderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CookHouseService_GetOrderByOrderID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookHouseServiceServer).GetOrderByOrderID(ctx, req.(*GetOrderByOrderIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CookHouseService_UpdateOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookHouseServiceServer).UpdateOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CookHouseService_UpdateOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookHouseServiceServer).UpdateOrderStatus(ctx, req.(*UpdateOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CookHouseService_ServiceDesc is the grpc.ServiceDesc for CookHouseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CookHouseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cookhouse.CookHouseService",
	HandlerType: (*CookHouseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllOrderByStatusFilter",
			Handler:    _CookHouseService_GetAllOrderByStatusFilter_Handler,
		},
		{
			MethodName: "GetOrderByOrderID",
			Handler:    _CookHouseService_GetOrderByOrderID_Handler,
		},
		{
			MethodName: "UpdateOrderStatus",
			Handler:    _CookHouseService_UpdateOrderStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cookhouse.proto",
}
